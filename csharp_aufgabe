using System;
using System.Collections.Generic;
using System.IO;
using System.Security.Cryptography;
using System.Text;

namespace LoginRegisterSystem
{
    public class User
    {
        public string Username { get; set; }
        public string PasswordHash { get; set; }
        public string Email { get; set; }
        public DateTime CreatedDate { get; set; }
    }

    public class UserManager
    {
        private List<User> users;
        private const string DATA_FILE = "users.txt";

        public UserManager()
        {
            users = new List<User>();
            LoadUsers();
        }

        private string HashPassword(string password)
        {
            using (SHA256 sha256Hash = SHA256.Create())
            {
                byte[] bytes = sha256Hash.ComputeHash(Encoding.UTF8.GetBytes(password));
                StringBuilder builder = new StringBuilder();
                for (int i = 0; i < bytes.Length; i++)
                {
                    builder.Append(bytes[i].ToString("x2"));
                }
                return builder.ToString();
            }
        }

        public bool RegisterUser(string username, string password, string email)
        {
            // Check if username already exists
            if (users.Exists(u => u.Username.ToLower() == username.ToLower()))
            {
                return false;
            }

            // Create new user
            User newUser = new User
            {
                Username = username,
                PasswordHash = HashPassword(password),
                Email = email,
                CreatedDate = DateTime.Now
            };

            users.Add(newUser);
            SaveUsers();
            return true;
        }

        public bool LoginUser(string username, string password)
        {
            string hashedPassword = HashPassword(password);
            return users.Exists(u => u.Username.ToLower() == username.ToLower() && u.PasswordHash == hashedPassword);
        }

        public User GetUser(string username)
        {
            return users.Find(u => u.Username.ToLower() == username.ToLower());
        }

        private void SaveUsers()
        {
            try
            {
                using (StreamWriter writer = new StreamWriter(DATA_FILE))
                {
                    foreach (User user in users)
                    {
                        writer.WriteLine($"{user.Username}|{user.PasswordHash}|{user.Email}|{user.CreatedDate:yyyy-MM-dd HH:mm:ss}");
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error saving users: {ex.Message}");
            }
        }

        private void LoadUsers()
        {
            try
            {
                if (File.Exists(DATA_FILE))
                {
                    string[] lines = File.ReadAllLines(DATA_FILE);
                    foreach (string line in lines)
                    {
                        string[] parts = line.Split('|');
                        if (parts.Length == 4)
                        {
                            users.Add(new User
                            {
                                Username = parts[0],
                                PasswordHash = parts[1],
                                Email = parts[2],
                                CreatedDate = DateTime.Parse(parts[3])
                            });
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error loading users: {ex.Message}");
            }
        }

        public int GetUserCount()
        {
            return users.Count;
        }
    }

    class Program
    {
        private static UserManager userManager = new UserManager();

        static void Main(string[] args)
        {
            Console.WriteLine("=== Welcome to Login/Register System ===");
            Console.WriteLine();

            while (true)
            {
                ShowMainMenu();
                string choice = Console.ReadLine();

                switch (choice)
                {
                    case "1":
                        RegisterUser();
                        break;
                    case "2":
                        LoginUser();
                        break;
                    case "3":
                        ShowUserCount();
                        break;
                    case "4":
                        Console.WriteLine("Thank you for using our system. Goodbye!");
                        return;
                    default:
                        Console.WriteLine("Invalid choice. Please try again.");
                        break;
                }

                Console.WriteLine("\nPress any key to continue...");
                Console.ReadKey();
                Console.Clear();
            }
        }

        static void ShowMainMenu()
        {
            Console.WriteLine("Please choose an option:");
            Console.WriteLine("1. Register new user");
            Console.WriteLine("2. Login");
            Console.WriteLine("3. Show user count");
            Console.WriteLine("4. Exit");
            Console.Write("Enter your choice (1-4): ");
        }

        static void RegisterUser()
        {
            Console.Clear();
            Console.WriteLine("=== User Registration ===");
            Console.WriteLine();

            Console.Write("Enter username: ");
            string username = Console.ReadLine();

            if (string.IsNullOrWhiteSpace(username))
            {
                Console.WriteLine("Username cannot be empty!");
                return;
            }

            Console.Write("Enter password: ");
            string password = ReadPassword();

            if (string.IsNullOrWhiteSpace(password))
            {
                Console.WriteLine("Password cannot be empty!");
                return;
            }

            Console.Write("Enter email: ");
            string email = Console.ReadLine();

            if (string.IsNullOrWhiteSpace(email))
            {
                Console.WriteLine("Email cannot be empty!");
                return;
            }

            if (userManager.RegisterUser(username, password, email))
            {
                Console.WriteLine($"User '{username}' registered successfully!");
            }
            else
            {
                Console.WriteLine($"Registration failed. Username '{username}' already exists!");
            }
        }

        static void LoginUser()
        {
            Console.Clear();
            Console.WriteLine("=== User Login ===");
            Console.WriteLine();

            Console.Write("Enter username: ");
            string username = Console.ReadLine();

            Console.Write("Enter password: ");
            string password = ReadPassword();

            if (userManager.LoginUser(username, password))
            {
                Console.WriteLine($"Welcome back, {username}!");
                ShowUserDashboard(username);
            }
            else
            {
                Console.WriteLine("Invalid username or password!");
            }
        }

        static void ShowUserDashboard(string username)
        {
            User user = userManager.GetUser(username);
            Console.WriteLine();
            Console.WriteLine("=== User Dashboard ===");
            Console.WriteLine($"Username: {user.Username}");
            Console.WriteLine($"Email: {user.Email}");
            Console.WriteLine($"Account created: {user.CreatedDate:yyyy-MM-dd HH:mm:ss}");
            Console.WriteLine();
            Console.WriteLine("You are successfully logged in!");
        }

        static void ShowUserCount()
        {
            Console.Clear();
            Console.WriteLine("=== System Statistics ===");
            Console.WriteLine($"Total registered users: {userManager.GetUserCount()}");
        }

        static string ReadPassword()
        {
            StringBuilder password = new StringBuilder();
            ConsoleKeyInfo key;

            do
            {
                key = Console.ReadKey(true);

                if (key.Key != ConsoleKey.Backspace && key.Key != ConsoleKey.Enter)
                {
                    password.Append(key.KeyChar);
                    Console.Write("*");
                }
                else if (key.Key == ConsoleKey.Backspace && password.Length > 0)
                {
                    password.Length--;
                    Console.Write("\b \b");
                }
            } while (key.Key != ConsoleKey.Enter);

            Console.WriteLine();
            return password.ToString();
        }
    }
}
