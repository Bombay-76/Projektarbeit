#database.py datei 1
import os
import mariadb
import sys
import hashlib
from dotenv import load_dotenv
import mysql.connector

class Datenbank:
    def __init__(self):
        load_dotenv()#schütztdenzugangZurDatenbank
        try:
            #DatenbankConnection
            self.conn = mysql.connector.connect(
            host=os.getenv("HOST"),
            user=os.getenv("USER"),
            password=os.getenv("PASSWORD"),
            database=os.getenv("DATABASE"),
            port=int(os.getenv("PORT"))
        )
            self.cur = self.conn.cursor()
            print("Verbindung hergestellt!")
        except mariadb.Error:
            print("Da hat etwas nicht geklappt!")

    def register(self, mitarbeiter_nr, vorname, nachname, adresse, passwort):
        try:
            hashed_pw = hashlib.sha256(passwort.encode()).hexdigest()
            sql = "INSERT INTO mitarbeiter (mitarbeiter_nr, vorname, nachname, adresse, passwort) VALUES (%s, %s, %s, %s, %s)"
            self.cur.execute(sql, (mitarbeiter_nr, vorname, nachname, adresse, hashed_pw))
            self.conn.commit()
            print("Erfolgreich registriert!")
        except Exception:
            print("Fehler bei Registrierung")

    def login(self, mitarbeiter_nr, passwort):
        try:
            hashed_pw = hashlib.sha256(passwort.encode()).hexdigest()
            self.cur.execute(
                "SELECT * FROM mitarbeiter WHERE mitarbeiter_nr = %s AND passwort = %s",
                (mitarbeiter_nr, hashed_pw)
            )
            return self.cur.fetchone()
        except Exception:
            print("Login-Fehler")

    def add(self, projekt_id, projektname, kunden_nr):
        try:
            sql = "INSERT INTO Projekt (projekt_id, projektname, kunden_nr) VALUES (%s, %s, %s)"
            self.cur.execute(sql, (projekt_id, projektname, kunden_nr))
            self.conn.commit()
            print("Projekt erfolgreich hinzugefügt.")
        except Exception as e:
            print(f"Fehler beim Hinzufügen des Projekts: {e}")


    def arbeitszeit(self, projekt_id, stunden):
        try:
            sql = "INSERT INTO Zeiterfassung (projekt_id, stunden) VALUES (%s, %s)"
            self.cur.execute(sql, (projekt_id, stunden))
            self.conn.commit()
            print("Arbeitszeit erfasst.")
        except:
            print("Da hat etwas nicht geklappt!")

    def insight(self):
        try:
            self.cur.execute("SELECT * FROM projekt")
            return self.cur.fetchall()
        except:
            print("Da hat etwas nicht geklappt")
            return []

    def filter(self, kundennr):
        try:
            self.cur.execute("SELECT * FROM projekt WHERE kunden_nr = %s", (kundennr,))
            return self.cur.fetchall()
        except Exception:
            print(f"Fehler beim Filtern")
            return []
        
    def close(self):#FunktionZumSchließenDerDatenbankConnection
        self.conn.close()

#loginpage.py datei 2
import tkinter as tk, customtkinter as ctk
from registerpage import RegisterFrame
import database

    #KlasseFürDasDesignDesLoginfensters 
class LoginFrame(tk.Frame):
    def __init__(self, parent, db):
        super().__init__(self, parent, self.db)
        self.db = database.Datenbank()
        self.parent = parent
        self.container = parent
        self.login_bg()
        self.employee_id = self.tb_ID()
        self.employee_pw = self.tb_PW()
        self.bn_login()
        self.bn_registrieren()

    def login_bg(self):
        fg_frame = ctk.CTkFrame(self.parent, fg_color = "gray85", corner_radius=15)
        fg_frame.place(relx=0.3, rely=0.25, relwidth = 0.4, relheight = 0.45)
        ctk.CTkLabel(fg_frame, text= "Anmelden", font = ("Arial", 20)).pack(pady=10)
        return fg_frame

    def tb_ID(self):
        entry_id = ctk.CTkEntry(
            master = self.parent,
            placeholder_text = "Mitarbeiter ID",
            placeholder_text_color = "#ffffff",
            font = ("Arial", 14),
            text_color = "#ffffff",
            height = 30,
            width = 195,
            border_width = 1,
            corner_radius = 15,
            border_color = "#000000",
            bg_color = "gray85",
            fg_color = "#7d7d7d",
            )
        entry_id.place(relx=0.5, rely=0.4, anchor="center")
        return entry_id

    def tb_PW(self):
        entry_pw = ctk.CTkEntry(
            master = self.parent,
            placeholder_text = "Passwort",
            placeholder_text_color = "#ffffff",
            show = "*",
            font = ("Arial", 14),
            text_color = "#ffffff",
            height = 30,
            width = 195,
            border_width = 1,
            corner_radius = 15,
            border_color = "#000000",
            bg_color = "gray85",
            fg_color = "#7d7d7d",
            )
        entry_pw.place(relx=0.5, rely=0.47, anchor="center")
        return entry_pw

    def bn_login(self):
        button_login = ctk.CTkButton(
            master = self.parent,
            text = "Login",
            font = ("undefined", 14),
            text_color = "#ffffff",
            hover = True,
            hover_color = "#949494",
            height = 30,
            width = 95,
            border_width = 1,
            corner_radius = 15,
            border_color = "#000000",
            bg_color = "#D9D9D9",
            fg_color = "gray25",
            command = self.do_login
            )
        button_login.place(relx=0.45, rely=0.6, anchor="center")
        return button_login

    def bn_registrieren(self):
        button_register = ctk.CTkButton(
            master=self.parent,
            text="Registireren",
            font=("undefined", 14),
            text_color="#ffffff",
            hover=True,
            hover_color="#949494",
            height=30,
            width=95,
            border_width=1,
            corner_radius=15,
            border_color="#000000",
            bg_color="#D9D9D9",
            fg_color="gray25",
            command =  lambda:  self.container.show_frame("register")
            )
        button_register.place(relx=0.54, rely=0.6, anchor="center")
        return button_register
    
    def do_login(self):
        mitarbeiter_nr = self.employee_id.get()
        passwort = self.employee_pw.get()
        result = obj_db.login(mitarbeiter_nr, passwort)
        if result:
            print("Login erfolgreich!")
            self.container.show_frame("main")

#mainpage.py datei 3
import customtkinter as ctk
import tkinter as tk
import database

obj_db = database.Datenbank()

class MainFrame(tk.Frame):
    def __init__(self, parent):
        super().__init__(parent)
        self.parent = parent
        self.container = parent
        self.bg_main()
        self.lb_hint()
        self.tb_project_id()
        self.tb_project_name()
        self.tb_customer_nr()
        self.tb_work_time()
        self.bn_add_project()
        self.bn_log_time()
        self.bn_project_insight()

    def bg_main(self):
        fg_frame = ctk.CTkFrame(self.parent, fg_color="gray85", corner_radius=15)
        fg_frame.place(relx=0.2, rely=0.2, relwidth=0.6, relheight=0.6)
        ctk.CTkLabel(fg_frame, text="Projektverwaltung", font=("Arial", 20)).pack(pady=10)

    def bn_project_insight(self):
        btn = ctk.CTkButton(
            master=self.parent,
            text="Projektübersicht",
            command=lambda: self.container.show_frame("Alle Projekte"),
            font=("Arial", 14),
            width=150
        )
        btn.place(relx=0.5, rely=0.75, anchor="center")

    def lb_hint(self):
        label = ctk.CTkLabel(
            master=self.parent,
            text="Projekte hinzufügen oder Zeit erfassen:",
            font=("Arial", 14),
            text_color="#000000",
            bg_color="gray85"
        )
        label.place(relx=0.5, rely=0.3, anchor="center")

    def tb_project_id(self):
        self.entry_project_id = ctk.CTkEntry(
            master=self.parent,
            placeholder_text="Projekt-ID",
            font=("Arial", 14),
            width=200
        )
        self.entry_project_id.place(relx=0.5, rely=0.4, anchor="center")

    def tb_project_name(self):
        self.entry_project_name = ctk.CTkEntry(
            master=self.parent,
            placeholder_text="Projektname",
            font=("Arial", 14),
            width=200
        )
        self.entry_project_name.place(relx=0.5, rely=0.45, anchor="center")

    def tb_customer_nr(self):
        self.entry_customer_nr = ctk.CTkEntry(
            master=self.parent,
            placeholder_text="Kundennummer",
            font=("Arial", 14),
            width=200
        )
        self.entry_customer_nr.place(relx=0.5, rely=0.5, anchor="center")

    def tb_work_time(self):
        self.entry_work_time = ctk.CTkEntry(
            master=self.parent,
            placeholder_text="Gearbeitete Stunden (Projekt-ID, Stunden)",
            font=("Arial", 14),
            width=250
        )
        self.entry_work_time.place(relx=0.5, rely=0.6, anchor="center")

    def bn_add_project(self):
        btn = ctk.CTkButton(
            master=self.parent,
            text="Projekt hinzufügen",
            command=self.add,
            font=("Arial", 14),
            width=150
        )
        btn.place(relx=0.4, rely=0.7, anchor="center")

    def bn_log_time(self):
        btn = ctk.CTkButton(
            master=self.parent,
            text="Zeit erfassen",
            command=self.arbeitszeit,
            font=("Arial", 14),
            width=150
        )
        btn.place(relx=0.6, rely=0.7, anchor="center")

    def add(self):
        projekt_id = self.entry_project_id.get()
        projektname = self.entry_project_name.get()
        kunden_nr = self.entry_customer_nr.get()
        if projekt_id and projektname and kunden_nr:
            obj_db.add(projekt_id, projektname, kunden_nr)
            print("Projekt hinzugefügt")
        else:
            print("Bitte alle Felder ausfüllen")


    def arbeitszeit(self):
        try:
            projekt_id, stunden = self.entry_work_time.get().split(",")
            obj_db.arbeitszeit(projekt_id.strip(), float(stunden.strip()))
            print("Zeit erfasst")
        except:
            print("Da hat etwas nicht geklappt")

#registerpage.py datei 4
import customtkinter as ctk
import tkinter as tk
from customtkinter import CTkFrame
import database

obj_db = database.Datenbank()

class RegisterFrame(tk.Frame):
    def __init__(self, parent):
        tk.Frame.__init__(self, parent)
        self.parent = parent
        self.container = parent
        self.bg_register()
        self.lb_register_hint()
        self.entry_name = self.tb_name_input()
        self.entry_surname = self.tb_surname_input()
        self.entry_adress = self.tb_adress_input()
        self.entry_password = self.tb_password_input()
        self.bn_confirm_register()

# Hintergrund-Frame
    def bg_register(self):
        fg_frame = ctk.CTkFrame(self.parent, fg_color="gray85", corner_radius=15)
        fg_frame.place(relx=0.3, rely=0.25, relwidth=0.4, relheight=0.5)
        ctk.CTkLabel(fg_frame, text="Registrieren", font=("Arial", 20)).pack(pady=10)
        return fg_frame

# Hinweistext
    def lb_register_hint(self):
        lb_hint = ctk.CTkLabel(
            master=self.parent,
            text="Bitte geben Sie Ihre Daten ein:",
            font=("Arial", 14),
            text_color="#000000",
            height=30,
            width=95,
            corner_radius=0,
            bg_color="gray85",
            fg_color="gray85",
        )
        lb_hint.place(relx=0.5, rely=0.34, anchor="center")

# Eingabe Vorname
    def tb_name_input(self):
        tb_input_name = ctk.CTkEntry(
            master=self.parent,
            placeholder_text="Vorname",
            placeholder_text_color="#ffffff",
            font=("Arial", 14),
            text_color="#ffffff",
            height=30,
            width=195,
            border_width=1,
            corner_radius=15,
            border_color="#000000",
            bg_color="gray85",
            fg_color="#7d7d7d",
        )
        tb_input_name.place(relx=0.5, rely=0.4, anchor="center")
        return tb_input_name

# Eingabe Nachname
    def tb_surname_input(self):
        entry_surname = ctk.CTkEntry(
            master=self.parent,
            placeholder_text="Nachname",
            placeholder_text_color="#ffffff",
            font=("Arial", 14),
            text_color="#ffffff",
            height=30,
            width=195,
            border_width=1,
            corner_radius=15,
            border_color="#000000",
            bg_color="gray85",
            fg_color="#7d7d7d",
        )
        entry_surname.place(relx=0.5, rely=0.47, anchor="center")
        return entry_surname

# Eingabe Adresse
    def tb_adress_input(self):
        entry_adress = ctk.CTkEntry(
            master=self.parent,
            placeholder_text="Adresse",
            placeholder_text_color="#ffffff",
            font=("Arial", 14),
            text_color="#ffffff",
            height=30,
            width=195,
            border_width=1,
            corner_radius=15,
            border_color="#000000",
            bg_color="gray85",
            fg_color="#7d7d7d",
        )
        entry_adress.place(relx=0.5, rely=0.54, anchor="center")
        return entry_adress

# Eingabe Passwort
    def tb_password_input(self):
        entry_pw = ctk.CTkEntry(
            master=self.parent,
            placeholder_text="Passwort",
            placeholder_text_color="#ffffff",
            font=("Arial", 14),
            text_color="#ffffff",
            height=30,
            width=195,
            border_width=1,
            corner_radius=15,
            border_color="#000000",
            bg_color="gray85",
            fg_color="#7d7d7d",
            show="*"
        )
        entry_pw.place(relx=0.5, rely=0.61, anchor="center")
        return entry_pw

# Registrieren-Button mit Datenbankfunktion
    def bn_confirm_register(self):
        button_conf_register = ctk.CTkButton(
            master=self.parent,
            text="Registrieren",
            font=("Arial", 14),
            text_color="#ffffff",
            hover=True,
            hover_color="#949494",
            height=30,
            width=95,
            border_width=1,
            corner_radius=15,
            border_color="#000000",
            bg_color="#D9D9D9",
            fg_color="gray25",
            command=self.register_user  # ✅ ganz wichtig: OHNE Klammern!
        )
        button_conf_register.place(relx=0.5, rely=0.7, anchor="center")
        return button_conf_register


# Registrierung in Datenbank durchführen
    def register_user(self):
        vorname = self.entry_name.get()
        nachname = self.entry_surname.get()
        adresse = self.entry_adress.get()
        passwort = self.entry_password.get()

        if vorname and nachname and adresse and passwort:
            mitarbeiter_nr = vorname[:2] + nachname[:2] + "01"
            obj_db.register(mitarbeiter_nr, vorname, nachname, adresse, passwort)
            print("Registrierung erfolgreich")
            self.container.show_frame("login")
        else:
            print("Bitte alle Felder ausfüllen")

#projectinsight.py datei 5
import customtkinter as ctk
import tkinter as tk
import database

obj_db = database.Datenbank()

class Project_insight_Frame(tk.Frame):
    def __init__(self, parent):
        super().__init__(parent)
        self.parent = parent
        self.container = parent
        self.bg_project_view()
        self.lb_title()
        self.tb_filter_kundennr()
        self.bn_filter()
        self.bn_show_all()
        self.bn_back()
        self.lb_output = self.result_box()

    def bg_project_view(self):
        fg_frame = ctk.CTkFrame(self.parent, fg_color="gray85", corner_radius=15)
        fg_frame.place(relx=0.1, rely=0.15, relwidth=0.8, relheight=0.7)

    def lb_title(self):
        ctk.CTkLabel(
            master=self.parent,
            text="Projektübersicht",
            font=("Arial", 20),
            text_color="#000000",
            bg_color="gray85"
        ).place(relx=0.5, rely=0.18, anchor="center")

    def tb_filter_kundennr(self):
        self.entry_filter = ctk.CTkEntry(
            master=self.parent,
            placeholder_text="Kundennummer",
            font=("Arial", 14),
            width=200
        )
        self.entry_filter.place(relx=0.5, rely=0.28, anchor="center")

    def bn_filter(self):
        btn = ctk.CTkButton(
            master=self.parent,
            text="Filtern",
            command=self.show_filtered,
            font=("Arial", 14),
            width=120
        )
        btn.place(relx=0.42, rely=0.35, anchor="center")

    def bn_show_all(self):
        btn = ctk.CTkButton(
            master=self.parent,
            text="Alle Projekte",
            command=self.show_all,
            font=("Arial", 14),
            width=120
        )
        btn.place(relx=0.58, rely=0.35, anchor="center")

    def bn_back(self):
        btn = ctk.CTkButton(
            master=self.parent,
            text="Zurück",
            command=lambda: self.container.show_frame("main"),
            font=("Arial", 14),
            width=120
        )
        btn.place(relx=0.5, rely=0.85, anchor="center")

    def result_box(self):
        box = tk.Text(
            master=self.parent,
            height=15,
            width=100,
            bg="#f0f0f0",
            fg="black",
            font=("Arial", 10)
        )
        box.place(relx=0.5, rely=0.6, anchor="center")
        return box

    def show_all(self):
        self.lb_output.delete("1.0", tk.END)
        results = obj_db.insight()
        for row in results:
            self.lb_output.insert(tk.END, f"{row}\n")

    def show_filtered(self):
        kundennr = self.entry_filter.get()
        self.lb_output.delete("1.0", tk.END)
        results = obj_db.filter(kundennr)
        for row in results:
            self.lb_output.insert(tk.END, f"{row}\n")

#GUI.py datei 6 
import database
from loginpage import *
from mainpage import MainFrame
from Projectinsightpage import Project_insight_Frame

class GUI(tk.Tk):#KlasseFürGUI
    def __init__(self, *args, **kwargs):
        tk.Tk.__init__(self, *args, **kwargs)
        self.db = database.Datenbank()
        self.title("YouTrack")
        self.resizable(True, True)
        self.window_width = 1280
        self.window_height = 720
        self.center_window()
        ctk.set_appearance_mode("System")
        self.frame = tk.Frame(self)
        self.frame.pack(expand=True)
        self.show_frame("login")

    def show_frame(self, frame_name):
        if self.frame is not None:
            self.frame.destroy()
        if frame_name == "login":
            self.frame = LoginFrame(self, self.db)#Self.db ÜbergibtDatenbank
        elif frame_name == "register":
            self.frame = RegisterFrame(self, self.db)
        elif frame_name == "main":
            self.frame = MainFrame(self,self.db)
        elif frame_name == "project":
            self.frame = Project_insight_Frame(self, self.db)
        else:
            print("ungültig")
            return

        self.frame.pack(expand=True)

    def center_window(self):

        screen_width = self.winfo_screenwidth()
        screen_height = self.winfo_screenheight()

        x = int((screen_width - self.window_width) / 2)
        y = int((screen_height - self.window_height) / 2)

        self.geometry(f"{self.window_width}x{self.window_height}+{x}+{y}")

    def do_login(self):
        mitarbeiter_nr = self.employee_id.get()
        passwort = self.employee_pw.get()
        result = obj_db.login(mitarbeiter_nr, passwort)
        if result:
            print("Login erfolgreich!")
            self.container.show_frame("main")

if __name__ == "__main__":
    app = GUI()
    app.mainloop()

#main.py datei 7 
"""
    20250428
    Projektarbeit 2. Halbjahr
    Stundenrechner
    Bombay-76
    Leonard
"""
from GUI import GUI

if __name__ == "__main__":
    app = GUI()
    app.mainloop()

